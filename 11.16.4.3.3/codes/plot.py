import matplotlib.pyplot as plt
import re  # Import regex module

# Lists to store PMF and CDF values
pmf_values = []
cdf_values = []

# Read data from the file generated by the C program
with open("data.txt", "r") as file:
    for line in file:
        match = re.search(r"[-+]?\d*\.\d+|\d+", line)  # Extract numeric value
        if match:
            value = float(match.group())  # Convert extracted string to float
            if "P(X =" in line:  # Identify PMF lines
                pmf_values.append(value)
            elif "P(X <=" in line:  # Identify CDF lines
                cdf_values.append(value)

# X values corresponding to PMF and CDF
x_pmf = [1, 2, 3]
y_pmf = pmf_values

x_cdf = [0, 1, 2, 3]
y_cdf = cdf_values

# --- PMF Plot ---
plt.figure(figsize=(6, 4))
plt.stem(x_pmf, y_pmf, basefmt=" ", use_line_collection=True)
plt.title("Probability Mass Function (PMF) of X")
plt.xlabel("Outcome (n)")
plt.ylabel("Probability P(X = n)")
plt.xticks(x_pmf)
plt.ylim(0, max(y_pmf) + 0.05)  # Adjust y-axis limit for better fit
plt.grid(True, linestyle="--", alpha=0.6)  # Add grid for clarity
plt.savefig("pmf_plot.png")  # Save as PNG
plt.show()  # Display the PMF plot

# --- CDF Plot ---
plt.figure(figsize=(6, 4))
plt.step(x_cdf, y_cdf, where="post")
plt.title("Cumulative Distribution Function (CDF) of X")
plt.xlabel("Outcome (n)")
plt.ylabel("Cumulative Probability P(X â‰¤ n)")
plt.xticks(x_cdf)
plt.ylim(0, 1.05)  # Keep CDF within 0 and 1.05
plt.grid(True, linestyle="--", alpha=0.6)  # Add grid for clarity
plt.savefig("cdf_plot.png")  # Save as PNG
plt.show()  # Display the CDF plot

